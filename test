-- GalaxyUI.lua
--// Services
local Players           = game:GetService("Players")
local UserInputService  = game:GetService("UserInputService")
local TweenService      = game:GetService("TweenService")
local HttpService       = game:GetService("HttpService")
local RunService        = game:GetService("RunService")
local TextService       = game:GetService("TextService")

--// Local Player
local LocalPlayer = Players.LocalPlayer
if not LocalPlayer then
	LocalPlayer = Players.PlayerAdded:Wait()
end
local PlayerGui = LocalPlayer:WaitForChild("PlayerGui")

--// Main Library Table
local GalaxyUI = {
	Version        = "6.0",
	Flags          = {},
	Windows        = {},
	Connections    = {},
	UIElements     = {},
	ToggleKey      = Enum.KeyCode.RightShift,
	ToggleCooldown = 0.3,
	Fonts = {
		UI = {
			Regular = Enum.Font.Gotham,
			Medium  = Enum.Font.Gotham,
			Bold    = Enum.Font.Gotham,
		}
	}
}

--// Helper Functions
local function Create(instanceType)
	return function(props)
		local inst = Instance.new(instanceType)
		for k, v in pairs(props) do
			inst[k] = v
		end
		return inst
	end
end

local function safeDisconnect(conn)
	if conn and typeof(conn.Disconnect) == "function" then
		conn:Disconnect()
	end
end

--// Theme Manager
GalaxyUI.Themes = {
	Dark = {
		MainFrameColor  = Color3.fromRGB(24, 24, 24),
		ContentColor    = Color3.fromRGB(30, 30, 30),
		HeaderColor     = Color3.fromRGB(36, 36, 36),
		AccentColor     = Color3.fromRGB(90, 120, 255),
		AccentColor2    = Color3.fromRGB(130, 150, 255),
		TextColor       = Color3.fromRGB(235, 235, 235),
		SubTextColor    = Color3.fromRGB(180, 180, 180),
		ItemColor       = Color3.fromRGB(45, 45, 45),
		StrokeColor     = Color3.fromRGB(60, 60, 60),
		ShadowColor     = Color3.fromRGB(15, 15, 15),
		CornerRadius    = UDim.new(0, 8),
		TabWidth        = 110,
	},
	Light = {
		MainFrameColor  = Color3.fromRGB(245, 245, 245),
		ContentColor    = Color3.fromRGB(255, 255, 255),
		HeaderColor     = Color3.fromRGB(230, 230, 230),
		AccentColor     = Color3.fromRGB(0, 110, 220),
		AccentColor2    = Color3.fromRGB(80, 140, 230),
		TextColor       = Color3.fromRGB(20, 20, 20),
		SubTextColor    = Color3.fromRGB(100, 100, 100),
		ItemColor       = Color3.fromRGB(235, 235, 235),
		StrokeColor     = Color3.fromRGB(210, 210, 210),
		ShadowColor     = Color3.fromRGB(200, 200, 200),
		CornerRadius    = UDim.new(0, 8),
		TabWidth        = 110,
	}
}
GalaxyUI.Themes.Minimalist = GalaxyUI.Themes.Dark
GalaxyUI.Themes.Nord       = GalaxyUI.Themes.Dark
GalaxyUI.Themes.Default    = GalaxyUI.Themes.Dark
GalaxyUI.CurrentTheme      = "Dark"
GalaxyUI.Themes.Custom     = {}

local function getTheme()
	return GalaxyUI.Themes[GalaxyUI.CurrentTheme] or GalaxyUI.Themes.Dark
end

function GalaxyUI:SetTheme(themeName, customThemeData)
	if themeName == "Custom" and customThemeData then
		local default = GalaxyUI.Themes.Dark
		local merged  = {}
		for k, v in pairs(default) do
			merged[k] = customThemeData[k] or v
		end
		GalaxyUI.Themes.Custom = merged
	end

	if GalaxyUI.Themes[themeName] then
		GalaxyUI.CurrentTheme = themeName
	else
		warn("GalaxyUI: Theme '" .. themeName .. "' not found.")
	end
end

--// Config Manager
do
	local Config = {
		Enabled    = false,
		FolderName = "GalaxyUI",
		FileName   = "Config",
	}

	function GalaxyUI:EnableConfig(enabled, folderName, fileName)
		Config.Enabled = enabled
		if folderName then Config.FolderName = folderName end
		if fileName   then Config.FileName   = fileName   end

		if not isfolder then
			warn("GalaxyUI: `isfolder` is not available. Config disabled.")
			Config.Enabled = false
			return
		end

		if enabled then self:LoadConfig() end
	end

	function GalaxyUI:SaveConfig()
		if not Config.Enabled then return end
		local success, err = pcall(function()
			local data = {}
			for flag, value in pairs(GalaxyUI.Flags) do
				data[flag] = value
			end
			local encoded = HttpService:JSONEncode(data)

			if not isfolder(Config.FolderName) then
				makefolder(Config.FolderName)
			end
			local path = Config.FolderName .. "/" .. Config.FileName .. ".json"
			writefile(path, encoded)
		end)
		if not success then
			warn("GalaxyUI: Failed to save config -", err)
		end
	end

	function GalaxyUI:LoadConfig()
		if not Config.Enabled then return end
		local success, err = pcall(function()
			local path = Config.FolderName .. "/" .. Config.FileName .. ".json"
			if isfile(path) then
				local raw  = readfile(path)
				local data = HttpService:JSONDecode(raw)
				for flag, value in pairs(data) do
					if GalaxyUI.Flags[flag] ~= nil then
						GalaxyUI.Flags[flag] = value
						for _, element in ipairs(GalaxyUI.UIElements) do
							if element.Flag == flag and element.SetValue then
								element:SetValue(value, true)
							end
						end
					end
				end
			end
		end)
		if not success then
			warn("GalaxyUI: Failed to load config -", err)
		end
	end
end

--// Utility: Draggable & Resizable
local function Dragify(handle, target)
	local dragging, dragConn, endConn
	local dragStart, startPos

	handle.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 and not dragging then
			dragging   = true
			dragStart  = UserInputService:GetMouseLocation()
			startPos   = target.Position

			dragConn = UserInputService.InputChanged:Connect(function(inp)
				if inp.UserInputType == Enum.UserInputType.MouseMovement and dragging then
					local mouse = UserInputService:GetMouseLocation()
					local delta = mouse - dragStart
					target.Position = UDim2.new(
						startPos.X.Scale, startPos.X.Offset + delta.X,
						startPos.Y.Scale, startPos.Y.Offset + delta.Y
					)
				end
			end)

			endConn = UserInputService.InputEnded:Connect(function(inp)
				if inp.UserInputType == Enum.UserInputType.MouseButton1 then
					dragging = false
					safeDisconnect(dragConn)
					safeDisconnect(endConn)
				end
			end)
		end
	end)
end

local function Resizeify(handle, target, minSize)
	local resizing, moveConn, endConn
	local dragStart, startSize

	handle.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 and not resizing then
			resizing  = true
			dragStart = UserInputService:GetMouseLocation()
			startSize = target.AbsoluteSize

			moveConn = UserInputService.InputChanged:Connect(function(inp)
				if inp.UserInputType == Enum.UserInputType.MouseMovement and resizing then
					local mouse = UserInputService:GetMouseLocation()
					local delta = mouse - dragStart
					local newSize = startSize + delta
					target.Size = UDim2.new(
						0, math.max(minSize.X.Offset, newSize.X),
						0, math.max(minSize.Y.Offset, newSize.Y)
					)
				end
			end)

			endConn = UserInputService.InputEnded:Connect(function(inp)
				if inp.UserInputType == Enum.UserInputType.MouseButton1 then
					resizing = false
					safeDisconnect(moveConn)
					safeDisconnect(endConn)
				end
			end)
		end
	end)
end

--// Tooltip Manager
local TooltipFrame, tooltipText
do
	local theme = getTheme()
	TooltipFrame = Create("Frame")({
		Name                = "GalaxyTooltip",
		Size                = UDim2.new(0, 150, 0, 30),
		BackgroundColor3    = theme.ShadowColor,
		BackgroundTransparency = 1,
		ZIndex              = 9999,
		Parent              = PlayerGui,
		Visible             = false,
	})
	Create("UICorner")({ CornerRadius = UDim.new(0, 4), Parent = TooltipFrame })
	Create("UIStroke")({ Color = theme.StrokeColor, Thickness = 1, Parent = TooltipFrame })

	tooltipText = Create("TextLabel")({
		Size              = UDim2.new(1, -16, 1, -10),
		Position          = UDim2.new(0, 8, 0, 5),
		BackgroundTransparency = 1,
		TextColor3        = theme.TextColor,
		TextSize          = 14,
		TextWrapped       = true,
		TextXAlignment    = Enum.TextXAlignment.Left,
		TextYAlignment    = Enum.TextYAlignment.Center,
		Font              = Enum.Font.Gotham,
		Parent            = TooltipFrame,
	})
	Create("UIPadding")({ PaddingLeft = UDim.new(0, 8), PaddingRight = UDim.new(0, 8), Parent = tooltipText })

	local tooltipVisible = false
	RunService.RenderStepped:Connect(function()
		if tooltipVisible then
			local mPos = UserInputService:GetMouseLocation()
			TooltipFrame.Position = UDim2.fromOffset(mPos.X + 15, mPos.Y + 15)
		end
	end)

	function GalaxyUI.ShowTooltip(text)
		tooltipVisible = true
		tooltipText.Text = text
		local textSize = TextService:GetTextSize(text, 14, Enum.Font.Gotham, Vector2.new(200, 100))
		TooltipFrame.Size = UDim2.fromOffset(textSize.X + 16, textSize.Y + 10)
		TooltipFrame.Visible = true
		TweenService:Create(TooltipFrame, TweenInfo.new(0.2), { BackgroundTransparency = 0.1 }):Play()
	end

	function GalaxyUI.HideTooltip()
		tooltipVisible = false
		local tween = TweenService:Create(TooltipFrame, TweenInfo.new(0.2), { BackgroundTransparency = 1 })
		tween.Completed:Connect(function()
			if not tooltipVisible then TooltipFrame.Visible = false end
		end)
		tween:Play()
	end
end

--// Notification Manager
do
	local theme = getTheme()
	local container = Create("Frame")({
		Name                = "GalaxyNotificationContainer",
		Size                = UDim2.new(0, 320, 1, 0),
		Position            = UDim2.new(1, -330, 0, 0),
		BackgroundTransparency = 1,
		Parent              = PlayerGui,
	})
	local layout = Create("UIListLayout")({
		FillDirection       = Enum.FillDirection.Vertical,
		HorizontalAlignment = Enum.HorizontalAlignment.Right,
		VerticalAlignment   = Enum.VerticalAlignment.Bottom,
		SortOrder           = Enum.SortOrder.LayoutOrder,
		Padding             = UDim.new(0, 10),
		Parent              = container,
	})
	Create("UIPadding")({ PaddingBottom = UDim.new(0, 10), Parent = container })

	local iconMap = {
		Info    = "rbxassetid://6031229304",
		Warning = "rbxassetid://6031228498",
		Error   = "rbxassetid://6031227599",
	}
	local colorMap = {
		Info    = theme.AccentColor,
		Warning = Color3.fromRGB(255, 180, 50),
		Error   = Color3.fromRGB(255, 70, 70),
	}

	function GalaxyUI:Notify(options)
		local title    = options.Title    or "Notification"
		local content  = options.Content  or ""
		local duration = options.Duration or 5
		local nType    = options.Type     or "Info"

		local frame = Create("Frame")({
			Name                = "NotificationFrame",
			Size                = UDim2.new(1, 0, 0, 70),
			BackgroundColor3    = theme.ContentColor,
			BackgroundTransparency = 1,
			Position            = UDim2.new(2, 0, 0, 0),
			Parent              = container,
		})
		Create("UICorner")({ CornerRadius = UDim.new(0, 6), Parent = frame })
		Create("UIStroke")({ Color = theme.StrokeColor, Thickness = 1.2, Parent = frame })

		local accentBar = Create("Frame")({
			Name             = "Accent",
			Size             = UDim2.new(0, 4, 1, 0),
			BackgroundColor3 = colorMap[nType] or colorMap.Info,
			BorderSizePixel  = 0,
			Parent           = frame,
		})
		Create("UICorner")({ CornerRadius = UDim.new(0, 6), Parent = accentBar })

		local icon = Create("ImageLabel")({
			Name              = "Icon",
			Size              = UDim2.fromOffset(24, 24),
			Position          = UDim2.new(0, 15, 0.5, -12),
			BackgroundTransparency = 1,
			Image             = iconMap[nType] or iconMap.Info,
			ImageColor3       = colorMap[nType] or colorMap.Info,
			Parent            = frame,
		})

		local titleLabel = Create("TextLabel")({
			Name              = "Title",
			Size              = UDim2.new(1, -55, 0, 28),
			Position          = UDim2.new(0, 48, 0, 5),
			BackgroundTransparency = 1,
			Font              = Enum.Font.GothamBold,
			Text              = title,
			TextSize          = 16,
			TextColor3        = theme.TextColor,
			TextXAlignment    = Enum.TextXAlignment.Left,
			Parent            = frame,
		})

		local contentLabel = Create("TextLabel")({
			Name              = "Content",
			Size              = UDim2.new(1, -55, 1, -38),
			Position          = UDim2.new(0, 48, 0, 30),
			BackgroundTransparency = 1,
			Font              = Enum.Font.Gotham,
			Text              = content,
			TextSize          = 14,
			TextColor3        = theme.SubTextColor,
			TextXAlignment    = Enum.TextXAlignment.Left,
			TextYAlignment    = Enum.TextYAlignment.Top,
			TextWrapped       = true,
			Parent            = frame,
		})

		-- Animate In
		TweenService:Create(frame, TweenInfo.new(0.4, Enum.EasingStyle.Back, Enum.EasingDirection.Out),
			{ BackgroundTransparency = 0.05, Position = UDim2.new(0, 0, 0, 0) }
		):Play()

		-- Animate Out
		task.delay(duration, function()
			if not frame or not frame.Parent then return end
			local tween = TweenService:Create(frame, TweenInfo.new(0.4, Enum.EasingStyle.Back, Enum.EasingDirection.In),
				{ Position = UDim2.new(2, 0, 0, 0) }
			)
			tween.Completed:Connect(function()
				if frame then frame:Destroy() end
			end)
			tween:Play()
		end)
	end
end

--// Window Class
local Window = {}
Window.__index = Window

function GalaxyUI:CreateWindow(options)
	local window = {
		Connections = {},
		Tabs        = {},
		Elements    = {},
		Active      = true,
		IsMaximized = false,
	}
	setmetatable(window, Window)
	table.insert(self.Windows, window)

	local theme = getTheme()
	window.Theme = theme
	window.Name  = options.Name or "GalaxyUI"
	window.Size  = options.Size or UDim2.fromOffset(680, 450)
	window.MinSize = UDim2.fromOffset(480, 320)

	window.ScreenGui = Create("ScreenGui")({
		Name           = "GalaxyUI_" .. window.Name,
		ResetOnSpawn   = false,
		ZIndexBehavior = Enum.ZIndexBehavior.Sibling,
		Parent         = PlayerGui,
	})

	local shadow = Create("ImageLabel")({
		Name                 = "Shadow",
		BackgroundTransparency = 1,
		Image                = "rbxassetid://1316045233",
		ImageColor3          = theme.ShadowColor,
		ScaleType            = Enum.ScaleType.Slice,
		SliceCenter          = Rect.new(10,10,118,118),
		Parent               = window.ScreenGui,
	})

	window.MainFrame = Create("Frame")({
		Name            = "MainFrame",
		Size            = window.Size,
		Position        = UDim2.new(0.5, -window.Size.X.Offset/2, 0.5, -window.Size.Y.Offset/2),
		BackgroundColor3= theme.MainFrameColor,
		BorderSizePixel = 0,
		Parent          = window.ScreenGui,
	})
	window.OriginalPosition = window.MainFrame.Position
	window.OriginalSize     = window.MainFrame.Size

	-- sincroniza shadow
	shadow:GetPropertyChangedSignal("AbsoluteSize"):Connect(function()
		shadow.Position = window.MainFrame.Position + UDim2.fromOffset(8,8)
		shadow.Size     = window.MainFrame.Size
	end)
	shadow.Position = window.MainFrame.Position + UDim2.fromOffset(8,8)
	shadow.Size     = window.MainFrame.Size

	Create("UICorner")({ CornerRadius = theme.CornerRadius, Parent = window.MainFrame })

	-- TopBar + controles
	local topBar = Create("Frame")({
		Name            = "TopBar",
		Size            = UDim2.new(1,0,0,45),
		BackgroundColor3= theme.HeaderColor,
		BorderSizePixel = 0,
		Parent          = window.MainFrame,
	})
	local title = Create("TextLabel")({
		Name              = "Title",
		Size              = UDim2.new(1,-120,1,0),
		Position          = UDim2.fromOffset(15,0),
		BackgroundTransparency = 1,
		Font              = Enum.Font.GothamBold,
		Text              = window.Name .. " v" .. self.Version,
		TextSize          = 18,
		TextColor3        = theme.TextColor,
		TextXAlignment    = Enum.TextXAlignment.Left,
		Parent            = topBar,
	})
	local closeBtn = Create("TextButton")({
		Name              = "CloseButton",
		Size              = UDim2.fromOffset(28,28),
		Position          = UDim2.new(1,-38,0.5,-14),
		BackgroundTransparency = 1,
		Font              = Enum.Font.GothamBold,
		Text              = "X",
		TextSize          = 22,
		TextColor3        = theme.SubTextColor,
		Parent            = topBar,
	})
	local maximizeBtn = Create("TextButton")({
		Name              = "MaximizeButton",
		Size              = UDim2.fromOffset(28,28),
		Position          = UDim2.new(1,-68,0.5,-14),
		BackgroundTransparency = 1,
		Font              = Enum.Font.GothamBold,
		Text              = "🗖",
		TextSize          = 20,
		TextColor3        = theme.SubTextColor,
		Parent            = topBar,
	})
	local minimizeBtn = Create("TextButton")({
		Name              = "MinimizeButton",
		Size              = UDim2.fromOffset(28,28),
		Position          = UDim2.new(1,-98,0.5,-14),
		BackgroundTransparency = 1,
		Font              = Enum.Font.GothamBold,
		Text              = "—",
		TextSize          = 22,
		TextColor3        = theme.SubTextColor,
		Parent            = topBar,
	})
	for _, btn in pairs({closeBtn, maximizeBtn, minimizeBtn}) do
		btn.MouseEnter:Connect(function()
			TweenService:Create(btn, TweenInfo.new(0.2), {
				BackgroundTransparency = 0.9,
				TextColor3 = theme.TextColor
			}):Play()
		end)
		btn.MouseLeave:Connect(function()
			TweenService:Create(btn, TweenInfo.new(0.2), {
				BackgroundTransparency = 1,
				TextColor3 = theme.SubTextColor
			}):Play()
		end)
		Create("UICorner")({ CornerRadius = UDim.new(0,6), Parent = btn })
	end

	--// TabBar + ButtonsHolder
	window.TabBar = Create("Frame")({
		Name             = "TabBar",
		Size             = UDim2.new(1,0,0,40),
		Position         = UDim2.fromOffset(0,45),
		BackgroundColor3 = theme.MainFrameColor,
		BorderSizePixel  = 0,
		Parent           = window.MainFrame,
	})

	window.ButtonsHolder = Create("Frame")({
		Name                 = "ButtonsHolder",
		Size                 = UDim2.new(1,0,1,0),
		BackgroundTransparency= 1,
		Parent               = window.TabBar,
	})
	Create("UIListLayout")({
		FillDirection       = Enum.FillDirection.Horizontal,
		SortOrder           = Enum.SortOrder.LayoutOrder,
		VerticalAlignment   = Enum.VerticalAlignment.Center,
		Padding             = UDim.new(0,5),
		Parent              = window.ButtonsHolder,
	})
	Create("UIPadding")({
		PaddingLeft = UDim.new(0,10),
		Parent      = window.ButtonsHolder,
	})

	window.TabIndicator = Create("Frame")({
		Name             = "TabIndicator",
		Size             = UDim2.new(0, theme.TabWidth, 0, 2),
		Position         = UDim2.new(0,10,1,-2),
		BackgroundColor3 = theme.AccentColor,
		BorderSizePixel  = 0,
		ZIndex           = 3,
		Parent           = window.TabBar,
	})
	Create("UICorner")({ CornerRadius = UDim.new(1,0), Parent = window.TabIndicator })

	-- Content container
	window.ContentContainer = Create("Frame")({
		Name             = "ContentContainer",
		Size             = UDim2.new(1,0,1,-85),
		Position         = UDim2.fromOffset(0,85),
		BackgroundTransparency = 1,
		ClipsDescendants = true,
		Parent           = window.MainFrame,
	})

	-- Resize Grip
	local resizeGrip = Create("Frame")({
		Name             = "ResizeGrip",
		Size             = UDim2.fromOffset(20,20),
		Position         = UDim2.new(1,-20,1,-20),
		BackgroundTransparency = 1,
		Parent           = window.MainFrame,
	})
	Create("ImageLabel")({
		Name             = "GripIcon",
		Image            = "rbxassetid://5012242352",
		ImageColor3      = theme.SubTextColor,
		Size             = UDim2.fromOffset(16,16),
		Position         = UDim2.new(0.5,-8,0.5,-8),
		BackgroundTransparency = 1,
		Parent           = resizeGrip,
	})

	-- Event Connections
	closeBtn.MouseButton1Click:Connect(function() window:Destroy() end)
	minimizeBtn.MouseButton1Click:Connect(function() window:Toggle()  end)
	maximizeBtn.MouseButton1Click:Connect(function() window:Maximize() end)
	Dragify(topBar, window.MainFrame)
	Resizeify(resizeGrip, window.MainFrame, window.MinSize)

	-- Cria aba Home por padrão (não vai para window.Connections)
	self:CreateTab({
		Name   = "Home",
		Icon   = "rbxassetid://6023426915",
		Window = window
	})

	return window
end

function Window:Destroy()
	self.Active = false
	for i, v in ipairs(GalaxyUI.Windows) do
		if v == self then
			table.remove(GalaxyUI.Windows, i)
			break
		end
	end
	for _, tab in ipairs(self.Tabs) do
		tab:Destroy()
	end
	for _, conn in ipairs(self.Connections) do
		safeDisconnect(conn)
	end

	TweenService:Create(
		self.MainFrame,
		TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.In),
		{
			Size     = UDim2.fromOffset(0,0),
			Position = self.MainFrame.Position + UDim2.fromScale(
				self.MainFrame.Size.X.Scale/2,
				self.MainFrame.Size.Y.Scale/2
			)
		}
	):Play()

	self.ScreenGui:Destroy()
end

function Window:Toggle()
	local startPos = UDim2.new(
		0.5, -self.MainFrame.AbsoluteSize.X/2,
		0.5, -self.MainFrame.AbsoluteSize.Y/2
	)
	local goalPos
	self.Active = not self.Active

	if self.Active then
		self.MainFrame.Visible = true
		goalPos = startPos
	else
		goalPos = UDim2.new(0.5, -self.MainFrame.AbsoluteSize.X/2, -1, 0)
	end

	local tween = TweenService:Create(
		self.MainFrame,
		TweenInfo.new(0.4, Enum.EasingStyle.Quint, Enum.EasingDirection.Out),
		{ Position = goalPos }
	)
	if not self.Active then
		tween.Completed:Connect(function()
			if not self.Active then
				self.MainFrame.Visible = false
			end
		end)
	end
	tween:Play()
end

function Window:Maximize()
	self.IsMaximized = not self.IsMaximized
	local goalPos, goalSize

	if self.IsMaximized then
		self.OriginalPosition = self.MainFrame.Position
		self.OriginalSize     = self.MainFrame.Size
		self.MainFrame.AnchorPoint = Vector2.new(0.5,0.5)
		goalPos = UDim2.new(0.5,0,0.5,0)
		goalSize= UDim2.new(1,0,1,0)
	else
		self.MainFrame.AnchorPoint = Vector2.new(0,0)
		goalPos  = self.OriginalPosition
		goalSize = self.OriginalSize
	end

	TweenService:Create(
		self.MainFrame,
		TweenInfo.new(0.3, Enum.EasingStyle.Cubic, Enum.EasingDirection.Out),
		{ Position = goalPos, Size = goalSize }
	):Play()
end

--// Tab Class
local Tab = {}
Tab.__index = Tab

function GalaxyUI:CreateTab(options)
	assert(options.Window, "Tab must have a parent window.")
	local tab    = setmetatable({ Connections = {}, Elements = {} }, Tab)
	local theme  = getTheme()
	local window = options.Window
	tab.Window   = window

	tab.Button = Create("TextButton")({
		Name            = options.Name or "Tab",
		Size            = UDim2.new(0, theme.TabWidth, 1, -10),
		BackgroundColor3= theme.MainFrameColor,
		AutoButtonColor = false,
		Text            = "  " .. (options.Name or "Tab"),
		Font            = Enum.Font.Gotham,
		TextSize        = 15,
		TextColor3      = theme.SubTextColor,
		LayoutOrder     = #window.Tabs + 1,
		Parent          = window.ButtonsHolder, -- << agora em ButtonsHolder
	})
	Create("UICorner")({ CornerRadius = UDim.new(0,6), Parent = tab.Button })

	if options.Icon then
		Create("ImageLabel")({
			Name            = "Icon",
			Size            = UDim2.fromOffset(20,20),
			Position        = UDim2.new(0,10,0.5,-10),
			BackgroundTransparency = 1,
			Image           = options.Icon,
			ImageColor3     = theme.SubTextColor,
			Parent          = tab.Button,
		})
	end

	tab.ContentFrame = Create("ScrollingFrame")({
		Name              = options.Name .. "Content",
		Size              = UDim2.new(1,0,1,0),
		Position          = UDim2.new(1,0,0,0),
		BackgroundTransparency = 1,
		BorderSizePixel   = 0,
		ScrollBarImageColor3 = theme.AccentColor,
		ScrollBarThickness= 5,
		Parent            = window.ContentContainer,
	})
	Create("UIListLayout")({ SortOrder = Enum.SortOrder.LayoutOrder, Padding = UDim.new(0,8), Parent = tab.ContentFrame })
	Create("UIPadding")({
		PaddingTop    = UDim.new(0,15),
		PaddingBottom = UDim.new(0,15),
		PaddingLeft   = UDim.new(0,15),
		PaddingRight  = UDim.new(0,15),
		Parent        = tab.ContentFrame,
	})

	local icon = tab.Button:FindFirstChild("Icon")
	tab.Button.MouseEnter:Connect(function()
		if window.ActiveTab ~= tab then
			TweenService:Create(tab.Button, TweenInfo.new(0.2), {
				BackgroundColor3 = theme.ItemColor,
				TextColor3       = theme.TextColor
			}):Play()
			if icon then
				TweenService:Create(icon, TweenInfo.new(0.2), { ImageColor3 = theme.TextColor }):Play()
			end
		end
	end)
	tab.Button.MouseLeave:Connect(function()
		if window.ActiveTab ~= tab then
			TweenService:Create(tab.Button, TweenInfo.new(0.2), {
				BackgroundColor3 = theme.MainFrameColor,
				TextColor3       = theme.SubTextColor
			}):Play()
			if icon then
				TweenService:Create(icon, TweenInfo.new(0.2), { ImageColor3 = theme.SubTextColor }):Play()
			end
		end
	end)

	tab.Button.MouseButton1Click:Connect(function()
		window:SwitchToTab(tab)
	end)

	table.insert(window.Tabs, tab)
	if #window.Tabs == 1 then
		window:SwitchToTab(tab)
	end

	return tab
end

function Window:SwitchToTab(targetTab)
	if self.ActiveTab == targetTab then return end

	-- Animate old
	if self.ActiveTab then
		local old = self.ActiveTab
		local oldIcon = old.Button:FindFirstChild("Icon")
		TweenService:Create(old.Button, TweenInfo.new(0.2), {
			TextColor3       = self.Theme.SubTextColor,
			BackgroundColor3 = self.Theme.MainFrameColor
		}):Play()
		if oldIcon then
			TweenService:Create(oldIcon, TweenInfo.new(0.2), {
				ImageColor3 = self.Theme.SubTextColor
			}):Play()
		end
		TweenService:Create(old.ContentFrame, TweenInfo.new(0.25, Enum.EasingStyle.Cubic, Enum.EasingDirection.Out), {
			Position = UDim2.new(-1,0,0,0)
		}):Play()
	end

	-- Animate new
	self.ActiveTab = targetTab
	local newIcon = targetTab.Button:FindFirstChild("Icon")
	TweenService:Create(targetTab.Button, TweenInfo.new(0.2), {
		TextColor3       = self.Theme.TextColor,
		BackgroundColor3 = self.Theme.ItemColor
	}):Play()
	if newIcon then
		TweenService:Create(newIcon, TweenInfo.new(0.2), { ImageColor3 = self.Theme.AccentColor }):Play()
	end
	targetTab.ContentFrame.Position = UDim2.new(1,0,0,0)
	TweenService:Create(targetTab.ContentFrame, TweenInfo.new(0.25, Enum.EasingStyle.Cubic, Enum.EasingDirection.Out), {
		Position = UDim2.fromOffset(0,0)
	}):Play()

	-- Animate indicator
	local dx = targetTab.Button.AbsolutePosition.X - self.TabBar.AbsolutePosition.X
	local dy = self.TabBar.AbsoluteSize.Y - 2
	local w  = targetTab.Button.AbsoluteSize.X
	TweenService:Create(self.TabIndicator, TweenInfo.new(0.3, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
		Position = UDim2.fromOffset(dx, dy),
		Size     = UDim2.new(0, w, 0, 2)
	}):Play()
end

function Tab:Destroy()
	for _, el in ipairs(self.Elements) do
		el:Destroy()
	end
	for _, conn in ipairs(self.Connections) do
		safeDisconnect(conn)
	end
	self.Button:Destroy()
	self.ContentFrame:Destroy()
end

--// UI Element Factory
function GalaxyUI:CreateSection(options)
	local parentTab = assert(options.ParentTab, "ParentTab is required")
	local theme = getTheme()

	local obj = { Connections = {} }
	local container = Create("Frame")({
		Name = options.Name or "Section",
		Size = UDim2.new(1, 0, 0, 40),
		BackgroundTransparency = 1,
		Parent = parentTab.ContentFrame,
	})
	obj.Frame = container

	local label = Create("TextLabel")({
		Size = UDim2.new(1, 0, 0, 30),
		Position = UDim2.new(0,0,0.5, -15),
		BackgroundTransparency = 1,
		Font = Enum.Font.GothamBold,
		Text = string.upper(options.Name or "SECTION"),
		TextColor3 = theme.TextColor,
		TextSize = 14,
		TextXAlignment = Enum.TextXAlignment.Left,
		Parent = container
	})

	local line = Create("Frame")({
		Size = UDim2.new(1,0,0,1),
		Position = UDim2.new(0,0,1,-1),
		BackgroundColor3 = theme.StrokeColor,
		Parent = container
	})

	if options.Tooltip then
		local enterConn = container.MouseEnter:Connect(function() GalaxyUI.ShowTooltip(options.Tooltip) end)
		local leaveConn = container.MouseLeave:Connect(function() GalaxyUI.HideTooltip() end)
		table.insert(obj.Connections, enterConn)
		table.insert(obj.Connections, leaveConn)
	end

	function obj:Destroy()
		for _, c in ipairs(obj.Connections) do
			safeDisconnect(c)
		end
		obj.Frame:Destroy()
	end
	table.insert(parentTab.Elements, obj)
	return obj
end

function GalaxyUI:CreateButton(options)
	local parentTab = assert(options.ParentTab, "ParentTab is required")
	local theme = getTheme()
	local obj = { Connections = {} }

	obj.Frame = Create("Frame")({
		Name = options.Name or "Button",
		Size = UDim2.new(1, 0, 0, 40),
		BackgroundColor3 = theme.ItemColor,
		Parent = parentTab.ContentFrame
	})
	Create("UICorner")({ CornerRadius = theme.CornerRadius, Parent = obj.Frame })
	Create("UIStroke")({ Color = theme.StrokeColor, Parent = obj.Frame })

	local button = Create("TextButton")({
		Size = UDim2.fromScale(1, 1),
		BackgroundTransparency = 1,
		AutoButtonColor = false,
		Text = options.Name,
		Font = Enum.Font.Gotham,
		TextSize = 15,
		TextColor3 = theme.TextColor,
		Parent = obj.Frame
	})

	local defaultColor = obj.Frame.BackgroundColor3
	local hoverColor   = theme.AccentColor

	button.MouseEnter:Connect(function()
		TweenService:Create(obj.Frame, TweenInfo.new(0.2), { BackgroundColor3 = hoverColor }):Play()
	end)
	button.MouseLeave:Connect(function()
		TweenService:Create(obj.Frame, TweenInfo.new(0.2), { BackgroundColor3 = defaultColor }):Play()
	end)
	button.MouseButton1Click:Connect(function() pcall(options.Callback or function() end) end)

	if options.Tooltip then
		local e = button.MouseEnter:Connect(function() GalaxyUI.ShowTooltip(options.Tooltip) end)
		local l = button.MouseLeave:Connect(function() GalaxyUI.HideTooltip() end)
		table.insert(obj.Connections, e)
		table.insert(obj.Connections, l)
	end

	function obj:Destroy()
		for _, c in ipairs(obj.Connections) do
			safeDisconnect(c)
		end
		obj.Frame:Destroy()
	end

	table.insert(parentTab.Elements, obj)
	table.insert(GalaxyUI.UIElements, obj)
	return obj
end

function GalaxyUI:CreateToggle(options)
	local parentTab = assert(options.ParentTab, "ParentTab is required")
	local flag = options.Flag or ("Toggle_" .. HttpService:GenerateGUID(false))
	local theme = getTheme()
	local obj = { Flag = flag, Connections = {} }

	GalaxyUI.Flags[flag] = options.CurrentValue == true

	obj.Frame = Create("Frame")({
		Name = options.Name or "Toggle",
		Size = UDim2.new(1, 0, 0, 45),
		BackgroundTransparency = 1,
		Parent = parentTab.ContentFrame
	})

	local label = Create("TextLabel")({
		Size = UDim2.new(1, -70, 1, 0),
		Position = UDim2.fromOffset(10,0),
		BackgroundTransparency = 1,
		Font = Enum.Font.Gotham,
		Text = options.Name,
		TextColor3 = theme.TextColor, TextSize = 15, TextXAlignment = Enum.TextXAlignment.Left,
		Parent = obj.Frame,
	})

	local switch = Create("Frame")({
		Size = UDim2.fromOffset(44, 24),
		Position = UDim2.new(1, -54, 0.5, -12),
		BackgroundColor3 = theme.ItemColor,
		Parent = obj.Frame,
	})
	Create("UICorner")({ CornerRadius = UDim.new(1, 0), Parent = switch })
	Create("UIStroke")({ Color = theme.StrokeColor, Parent = switch })

	local knob = Create("Frame")({
		Size = UDim2.fromOffset(18, 18),
		Position = UDim2.fromOffset(3, 3),
		BackgroundColor3 = theme.SubTextColor,
		Parent = switch
	})
	Create("UICorner")({ CornerRadius = UDim.new(1, 0), Parent = knob })

	function obj:SetValue(value, silent)
		GalaxyUI.Flags[flag] = value
		local knobGoal = value and UDim2.fromOffset(23, 3) or UDim2.fromOffset(3, 3)
		local knobColor = value and theme.AccentColor or theme.SubTextColor
		TweenService:Create(knob, TweenInfo.new(0.2), {
			Position = knobGoal,
			BackgroundColor3 = knobColor
		}):Play()
		if not silent then
			pcall(options.Callback or function() end, value)
		end
	end

	local btn = Create("TextButton")({
		Size = UDim2.fromScale(1,1),
		BackgroundTransparency = 1,
		Text = "",
		Parent = switch
	})
	btn.MouseButton1Click:Connect(function()
		obj:SetValue(not GalaxyUI.Flags[flag])
	end)

	obj:SetValue(GalaxyUI.Flags[flag], true)

	if options.Tooltip then
		local e = obj.Frame.MouseEnter:Connect(function() GalaxyUI.ShowTooltip(options.Tooltip) end)
		local l = obj.Frame.MouseLeave:Connect(function() GalaxyUI.HideTooltip() end)
		table.insert(obj.Connections, e)
		table.insert(obj.Connections, l)
	end

	function obj:Destroy()
		for _, c in ipairs(obj.Connections) do
			safeDisconnect(c)
		end
		obj.Frame:Destroy()
	end

	table.insert(parentTab.Elements, obj)
	table.insert(GalaxyUI.UIElements, obj)
	return obj
end

function GalaxyUI:CreateSlider(options)
	local parentTab = assert(options.ParentTab, "ParentTab is required")
	local flag = options.Flag or ("Slider_" .. HttpService:GenerateGUID(false))
	local theme = getTheme()
	local range = options.Range or {0, 100}
	local increment = options.Increment or 1
	local obj = { Flag = flag, Connections = {} }

	GalaxyUI.Flags[flag] = options.CurrentValue or range[1]

	obj.Frame = Create("Frame")({
		Name = options.Name or "Slider",
		Size = UDim2.new(1, -30, 0, 50),
		BackgroundTransparency = 1,
		Parent = parentTab.ContentFrame
	})

	Create("TextLabel")({
		Size = UDim2.new(1, -70, 0, 20),
		BackgroundTransparency = 1,
		Font = GalaxyUI.Fonts.UI.Medium,
		Text = options.Name or "Slider",
		TextColor3 = theme.TextColor,
		TextSize = 15,
		TextXAlignment = Enum.TextXAlignment.Left,
		Parent = obj.Frame
	})

	local valueLabel = Create("TextLabel")({
		Size = UDim2.new(0, 60, 0, 20),
		Position = UDim2.new(1, -60, 0, 0),
		BackgroundTransparency = 1,
		Font = GalaxyUI.Fonts.UI.Regular,
		Text = tostring(GalaxyUI.Flags[flag]),
		TextColor3 = theme.SubTextColor,
		TextSize = 15,
		TextXAlignment = Enum.TextXAlignment.Right,
		Parent = obj.Frame
	})

	local track = Create("Frame")({
		Size = UDim2.new(1, 0, 0, 6),
		Position = UDim2.new(0, 0, 1, -12),
		BackgroundColor3 = theme.ItemColor,
		Parent = obj.Frame
	})
	Create("UICorner")({ CornerRadius = UDim.new(1, 0), Parent = track })
	Create("UIStroke")({ Color = theme.StrokeColor, Thickness = 1, Parent = track })

	local fill = Create("Frame")({
		Size = UDim2.new((GalaxyUI.Flags[flag] - range[1]) / (range[2] - range[1]), 0, 1, 0),
		BackgroundColor3 = theme.AccentColor,
		Parent = track
	})
	Create("UICorner")({ CornerRadius = UDim.new(1, 0), Parent = fill })

	local knob = Create("Frame")({
		Size = UDim2.fromOffset(16, 16),
		AnchorPoint = Vector2.new(0.5, 0.5),
		Position = UDim2.new((GalaxyUI.Flags[flag] - range[1]) / (range[2] - range[1]), 0, 0.5, 0),
		BackgroundColor3 = theme.AccentColor,
		ZIndex = 2,
		Parent = track
	})
	Create("UICorner")({ CornerRadius = UDim.new(1, 0), Parent = knob })

	local dragging = false
	function obj:SetValue(value, silent)
		value = math.clamp(value, range[1], range[2])
		value = math.round(value / increment) * increment
		GalaxyUI.Flags[flag] = value
		local alpha = (value - range[1]) / (range[2] - range[1])
		TweenService:Create(fill, TweenInfo.new(0.1), { Size = UDim2.new(alpha, 0, 1, 0) }):Play()
		TweenService:Create(knob, TweenInfo.new(0.1), { Position = UDim2.new(alpha, 0, 0.5, 0) }):Play()
		valueLabel.Text = tostring(value)
		if not silent and options.Callback then
			pcall(options.Callback, value)
		end
	end

	local button = Create("TextButton")({
		Size = UDim2.fromScale(1, 1),
		BackgroundTransparency = 1,
		Text = "",
		Parent = track
	})
	table.insert(obj.Connections, button.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 then
			dragging = true
			local relativeX = math.clamp(input.Position.X - track.AbsolutePosition.X, 0, track.AbsoluteSize.X)
			local alpha = relativeX / track.AbsoluteSize.X
			obj:SetValue(range[1] + alpha * (range[2] - range[1]))

			local moveConn = UserInputService.InputChanged:Connect(function(inp)
				if inp.UserInputType == Enum.UserInputType.MouseMovement and dragging then
					local relX = math.clamp(inp.Position.X - track.AbsolutePosition.X, 0, track.AbsoluteSize.X)
					local a = relX / track.AbsoluteSize.X
					obj:SetValue(range[1] + a * (range[2] - range[1]))
				end
			end)
			local endConn = UserInputService.InputEnded:Connect(function(inp)
				if inp.UserInputType == Enum.UserInputType.MouseButton1 then
					dragging = false
					safeDisconnect(moveConn)
					safeDisconnect(endConn)
				end
			end)
		end
	end))

	if options.Tooltip then
		local e = obj.Frame.MouseEnter:Connect(function() GalaxyUI.ShowTooltip(options.Tooltip) end)
		local l = obj.Frame.MouseLeave:Connect(function() if not dragging then GalaxyUI.HideTooltip() end end)
		table.insert(obj.Connections, e)
		table.insert(obj.Connections, l)
	end

	function obj:Destroy()
		for _, c in ipairs(self.Connections) do
			safeDisconnect(c)
		end
		obj.Frame:Destroy()
	end

	table.insert(parentTab.Elements, obj)
	table.insert(GalaxyUI.UIElements, obj)

	-- Ajusta CanvasSize
	parentTab.ContentFrame.CanvasSize = UDim2.new(0, 0, 0, parentTab.ContentFrame.UIListLayout.AbsoluteContentSize.Y + 30)
	return obj
end

-- Global Input & Cleanup
do
	local inputConn = UserInputService.InputBegan:Connect(function(input, gameProcessed)
		if gameProcessed then return end
		if input.KeyCode == GalaxyUI.ToggleKey then
			for _, window in ipairs(GalaxyUI.Windows) do
				window:Toggle()
			end
		end
	end)

	function GalaxyUI:Destroy()
		for i = #self.Windows, 1, -1 do
			self.Windows[i]:Destroy()
		end
		self.Windows     = {}
		self.UIElements  = {}
		self.Flags       = {}
		for _, conn in ipairs(self.Connections) do
			safeDisconnect(conn)
		end
		safeDisconnect(inputConn)
		TooltipFrame:Destroy()
	end

	table.insert(GalaxyUI.Connections, inputConn)
end

return GalaxyUI
